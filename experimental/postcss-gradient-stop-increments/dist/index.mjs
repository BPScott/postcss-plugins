import{stringify as e,replaceComponentValues as n,parseCommaSeparatedListOfComponentValues as a,isFunctionNode as t,isTokenNode as r,isCommentNode as s,TokenNode as i,FunctionNode as o,WhitespaceNode as l}from"@csstools/css-parser-algorithms";import{calcFromComponentValues as u}from"@csstools/css-calc";import{tokenize as c,TokenType as v,NumberType as m}from"@csstools/css-tokenizer";const f=/(repeating-)?(linear|radial|conic)-gradient\(/i,g=/^(repeating-)?(linear|radial|conic)-gradient$/i,d=/^(abs|acos|asin|atan|atan2|calc|clamp|cos|exp|hypot|log|max|min|mod|pow|rem|round|sign|sin|sqrt|tan)$/i,creator=o=>{const l=Object.assign({preserve:!1},o);return{postcssPlugin:"postcss-gradient-stop-increments",Declaration(o){if(!f.test(o.value))return;if(!c({css:o.value}).find((e=>e[0]===v.Delim&&"+"===e[4].value)))return;const u=e(n(a(c({css:o.value})),(e=>{if(!t(e))return;const n=e.getName();if(!g.test(n))return;let a=null;for(let n=0;n<e.value.length;n++){const o=e.value[n];if(r(o)&&o.value[0]===v.Delim&&"+"===o.value[4].value){const t=o,r=n;for(;s(e.value[n+1]);)n++;if(n++,isZeroOrNegative(e.value[n])){const a=new i([v.Number,"0",-1,-1,{value:0,type:m.Integer}]);e.value.splice(r,n-r+1,a),n=e.value.indexOf(a);continue}const l=incrementLengthNode(a,t,e.value[n]);e.value.splice(r,n-r+1,l),a=l,n=e.value.indexOf(l)}else(isNumericLargerThanZero(o)||t(o)&&d.test(o.getName()))&&(a=maxOfLastAndCurrentLengthNode(a,o))}})));u!==o.value&&(o.cloneBefore({value:u}),null!=l&&l.preserve||o.remove())}}};function isNumericLargerThanZero(e){return!(!r(e)||e.value[0]!==v.Percentage&&e.value[0]!==v.Dimension&&e.value[0]!==v.Number||!(e.value[4].value>0))}function isZeroOrNegative(e){return!(!r(e)||e.value[0]!==v.Percentage&&e.value[0]!==v.Dimension&&e.value[0]!==v.Number||!(e.value[4].value<=0))}function incrementLengthNode(e,n,a){if(!e)return a;const t=new o([v.Function,"calc(",-1,-1,{value:"calc"}],[v.CloseParen,")",-1,-1,void 0],[e,new l([[v.Whitespace," ",-1,-1,void 0]]),n,new l([[v.Whitespace," ",-1,-1,void 0]]),a]),[[r]]=u([[t]]);return r}function maxOfLastAndCurrentLengthNode(e,n){if(!e)return n;const a=new o([v.Function,"max(",-1,-1,{value:"max"}],[v.CloseParen,")",-1,-1,void 0],[e,new i([v.Comma,",",-1,-1,void 0]),new l([[v.Whitespace," ",-1,-1,void 0]]),n]),[[t]]=u([[a]]);return t}creator.postcss=!0;export{creator as default};
